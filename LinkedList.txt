import Foundation

public class Node<Value> {
    public var value : Value 
    public var next: Node?
    
    public init(value: Value, next: Node? = nil) {
        self.value = value
        self.next = next
    }
}

extension Node: CustomStringConvertible {
    public var description : String {
        guard let next = next else {
            return "\(value)"
        }
        return "\(value) ->" + String(describing: next) + " "
    }
}

public struct LinkedList<Value> {
    var head: Node<Value>?
    var tail: Node<Value>?
    
    public init() {}
    
    public var isEmpty: Bool {
        return head == nil
    }
    
    public mutating func push(value: Value) {
        head = Node(value: value, next: head)
        if tail == nil {
            tail = head
        }
    }
    
    public mutating func append(value: Value) {
     guard !isEmpty else {
         push(value: value)
         return
     }
      tail!.next = Node(value: value)
      tail = tail!.next
   }
   
   public mutating func node(at index: Int) -> Node<Value>?  {
       var currentNode = head
       var currentIndex = 0
       
       while(currentNode != nil && currentIndex < index ) {
           currentIndex += 1
           currentNode = currentNode!.next
       }
     return currentNode
   }
   
   @discardableResult
   public mutating func insert(after : Node<Value>, value: Value) -> Node<Value> {
    guard tail !== after else {
        append(value: value)
        return tail!
    }
      after.next = Node(value: value, next: after.next)
        return after.next!
   }
       
   
   
}
extension LinkedList: CustomStringConvertible {
    public var description: String {
        guard let head = head else { 
           return "Empty list"
        }
    return String(describing: head)
 }
}
 var firstLinkedList = LinkedList<Int>()

 firstLinkedList.push(value: 1)
 firstLinkedList.push(value: 3)
 firstLinkedList.push(value: 3)
 firstLinkedList.push(value: 4)
 firstLinkedList.append(value: 80)
 firstLinkedList.append(value: 0)
 firstLinkedList.append(value: 10)
 firstLinkedList.append(value: 6)
 

 print(firstLinkedList)

  var someExistingNode = firstLinkedList.node(at: 3)
   firstLinkedList.insert(after: someExistingNode!, value: 786)

print("afterInserting")
 print(firstLinkedList)
print("afterInserting")
